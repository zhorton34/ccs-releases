name: Auto Sync Release

on:
  release:
    types: [created]  
  repository_dispatch:
  workflow_dispatch: 

jobs:
  sync-releases:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3 

      - name: Setup git & gh
        run: |
          sudo apt-get update && sudo apt-get install git
          echo ${{ secrets.GH_AUTH_TOKEN }} | gh auth login --with-token

      - name: Get Latest Tag from Source Repository
        id: get_latest_release
        run: |
          latestTag=$(gh release view --repo zhorton34/ccs --json tagName -q ".tagName")
          echo "Latest Tag in Source Repo: $latestTag"
          echo "::set-output name=latest_tag::$latestTag" 

      - name: Sync Release
        run: |
          mkdir -p tmp
          gh release download ${{ steps.get_latest_release.outputs.latest_tag }} --repo zhorton34/ccs --dir=tmp
          gh release create ${{ steps.get_latest_release.outputs.latest_tag }} --repo zhorton34/ccs-releases --title "Release ${{ steps.get_latest_release.outputs.latest_tag }}" --notes "Automatically synced from zhorton34/ccs" tmp/*
          rm -rf tmp
      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install jq
     
      - name: Setup veriables
        run: |
          export latestTag=${{ steps.get_latest_release.outputs.latest_tag }}
          export latestTagWithoutV=$(echo $latestTag | sed 's/v//')
    
      - name: Update releases.json and integrate signatures
        run: |
          # 1. Download releases.json
          curl -L -o releases.json https://github.com/zhorton34/ccs/releases/download/${{ env.latestTag }}/latest.json

          # 2. Replace repo URLs
          sed -i 's/github.com\/zhorton34\/ccs/github.com\/zhorton34\/ccs-releases/g' releases.json

          # 3. Update signatures (assuming platforms match files with .sig extensions)
          data=$(jq -r '.[]' releases.json)

          for platform in $(jq -r '.platforms | keys[]' releases.json); do
            signature_file="clean-code-studio_${{ env.latestTagWithoutV }}-$platform.AppImage.tar.gz.sig"  # Adapt naming if needed

            if [[ -f "$signature_file" ]]; then 
              signature=$(gpg --dearmor "$signature_file" | grep 'signature from' | head -n 1)  # Or adjust to get the correct line
              data=$(echo $data | jq ".platforms.$platform.signature |= $signature")
            else
              echo "Warning: Signature file not found for $platform" 
            fi
          done

          echo $updated_data | jq . > releases.json 


          # 4. Update signatures in releases.json (assumes jq is installed)
          data=$(jq -r '.[]' releases.json)
          updated_data=$(echo $data | jq '.signature |= $signatures')
          echo $updated_data | jq . > releases.json  

          # 5. Commit and push
          git config --global user.name 'zhorton34'
          git config --global user.email 'zhorton999@gmail.com'
          git add releases.json
          git commit -m "Update releases.json for ${{ env.latestTag }}"
          git status
          ls -a
          cat releases.json
          git push origin main
